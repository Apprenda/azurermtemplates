{
	/* Template Schema & Version Definition */
	"$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json",
	"contentVersion": "1.0.0.0",
	/* Parameters Definitions  */
	"parameters": {
		"location": {
			"type": "string",
			"defaultValue": "West US",
			"allowedValues": [
				"West US",
				"North Europe"
			]
		},
		/* Storage */
		"storageAccountName": {
			"type": "string",
			"defaultValue":"cbastg"
		},

		"storageAccountType": {
			"type": "string",
			"defaultValue": "Standard_LRS",
			"allowedValues": [
				"Standard_LRS",
				"Premium_LRS"
			]
		},
		"vmStorageAccountContainerName": {
			"type": "string",
			"defaultValue": "cbavhds"
		},
		"vmNumberOfDataDisks": {
			"type": "int",
			"defaultValue": 2
		},
		"vmSizeDataDisks": {
			"type": "int",
			"defaultValue": 120
		},
		"vmFileSystem": {
			"type": "string",
			"allowedValues": [
				"ext4",
				"xfs"
			],
			"defaultValue": "ext4"
		},
		"createRAID": {
			"type": "string",
			"allowedValues": [
				"true",
				"false"
			],
			"defaultValue": "true"
		},

		/* Computing */
		"availabilitySetName": {
			"type": "string",
			"defaultValue": "CbAvSet"
		},
		"vmName": {
			"type": "string",
			"defaultValue": "VMCba"
		},
		"vmSize": {
			"type": "string",
			"defaultValue": "Standard_A2",
			"allowedValues": [
				"Standard_A1",
				"Standard_A2",
				"Standard_A3",
				"Standard_A4"
			]
		},
		"adminUserName": {
			"type": "string"
		},
		"adminPassword": {
			"type": "string"
		},
		"sshKeyData": {
			"type": "string"			
		},
		"numberOfVms": {
			"type": "int",
			"defaultValue": 3
		},
		"faultDomainCount": {
			"type": "int",
			"defaultValue": 3
		},
		"updateDomainCount": {
			"type": "int",
			"defaultValue": 10
		},
		"customScriptConfigStorageAccountName":{
			"type": "string",
			},		
		"customScriptConfigStorageAccountKey":{
			"type": "string",
			},
		"sshRootCerBlobLocation":{
			"type": "string",
			"defaultValue":"customscript/id_rsa"
			},
		"sshRootPubBlobLocation":{
			"type": "string",
			"defaultValue":"customscript/id_rsa.pub"
			},			

		/*Networking*/
		"virtualNetworkName": {
			"type": "string",
			"defaultValue": "vnetCBA"
		},
		"addressPrefix": {
			"type": "string",
			"defaultValue": "10.0.0.0/16"
		},
		"subnet1Name": {
			"type": "string",
			"defaultValue": "FrontEnd"
		},
		"subnet2Name": {
			"type": "string",
			"defaultValue": "Backend"
		},
		"subnet1Prefix": {
			"type": "string",
			"defaultValue": "10.0.1.0/24"
		},
		"subnet2Prefix": {
			"type": "string",
			"defaultValue": "10.0.2.0/24"
		},
		"publicIPName": {
			"type": "string",
			"defaultValue": "VIPCBA"
		},
		"publicIPType": {
			"type": "string",
			"defaultValue": "Dynamic",
			"allowedValues": [
				"Dynamic",
				"Static"
			]
		},
		"VMIPAddressStart": {
			"type": "string",
			"defaultValue": "10.0.2.2"
		},
		"vmNICNamePattern": {
			"type": "string",
			"defaultValue": "NicVmCba"
		},
		"dnsNameLabel": {
			"type": "string"
		},
		"loadBalancerName": {
			"type": "string",
			"defaultValue": "CouchbaseLB"
		},
		"sshNatRuleFrontEndPort": {
			"type": "string",
			"defaultValue": "6400"
		},
		"sshNatRuleBackEndPort": {
			"type": "int",
			"defaultValue": 22
		}
	},

	/* Variable Definitions for simpler Template Definition */
	"variables": {
		/* Compute */
		"vmSourceImageName": "5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20150128",
		"vmSourceImageRef": "[concat('/',subscription().subscriptionId,'/services/images/',variables('vmSourceImageName'))]",
		"sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",			
		/* Custom Script Extension - Ansible Master */
		"customScriptAnsibleFile" :"configure_ansible.sh",
		"customScriptAnsibleUrl": "[concat('https://',parameters('customScriptConfigStorageAccountName'),'.blob.core.windows.net/customscript/',variables('customScriptAnsibleFile'))]",		
		"customScriptAnsibleCommand": "[concat('bash ',variables('customScriptAnsibleFile'))]",		
		"customScriptAnsibleParameters": "[concat(' -i ',parameters('VMIPAddressStart'),' -n ',parameters('numberOfVms'),' -r ',parameters('createRAID'),' -f ',parameters('vmFileSystem'))]", 
		"sshRootCerBlobUrl" :"[concat('https://',parameters('customScriptConfigStorageAccountName'),'.blob.core.windows.net/',parameters('sshRootCerBlobLocation'))]",		
		/* Custom Script Extension - Configure SSH all VMs */
		"customScriptSSHRootFile" :"configure_ssh_root.sh",
		"customScriptSSHRootUrl": "[concat('https://',parameters('customScriptConfigStorageAccountName'),'.blob.core.windows.net/customscript/',variables('customScriptSSHRootFile'))]",		
		"customScriptSSHRootCommand": "[concat('bash ',variables('customScriptSSHRootFile'))]",		
		"sshRootPubBlobUrl" :"[concat('https://',parameters('customScriptConfigStorageAccountName'),'.blob.core.windows.net/',parameters('sshRootPubBlobLocation'))]",				
		/* Networking */
		"newVirtualNetworkName": "[concat(parameters('virtualNetworkName'))]",
		"publicIPName": "[concat(parameters('publicIPName'))]",
		"publicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName'))]",
		"NICipconfig": "ipCnfgBE",
		"NICRef": "[resourceId('Microsoft.Network/networkInterfaces',parameters('vmNICNamePattern'))]",
		"DNSNameLB": "[concat(parameters('dnsNameLabel'))]",
		"vnetRef": "[resourceId('Microsoft.Network/virtualNetworks',variables('newVirtualNetworkName'))]",
		"subnetBackEndRef": "[concat(variables('vnetRef'),'/subnets/',parameters('subnet2Name'))]",
		"FrontEndRef": "[concat(variables('vnetRef'),'/subnets/',parameters('subnet1Name'))]",
		/* Load balancer */
		"loadBalancerRef": "[resourceId('Microsoft.Network/loadBalancers',parameters('loadBalancerName'))]",
		"lbRuleName": "lbRuleCbAdmin",
		"lbRuleRef": "[concat(variables('loadBalancerRef'),'/loadBalancingRules/',variables('lbRuleName'))]",
		"lbFEConfig": "PLBcbaFrontConfg",
		"lbFEConfigRef": "[concat(variables('loadBalancerRef'),'/frontendIPConfigurations/',variables('lbFEConfig'))]",
		"lbBEConfig": "[concat('LBBEcbaFrontConfg')]",
		"lbBEConfigRef": "[concat(variables('loadBalancerRef'),'/backendAddressPools/' ,variables('lbBEConfig'))]",
		"lbcbaProbe": "[concat('cbaLBProbe')]",
		"lbcbaProbeRef": "[concat(variables('loadBalancerRef'),'/probes/',variables('lbcbaProbe'))]",
		"lbcbaPort": 8092,
		"lbcbaAdminPort": 8091,
		"lbcbaDataAcccessPort": 11211,
		"lbcbaIdleTimeOut": 4,
		/* Storage */
		"storageAccountName": "[concat(resourceGroup().name,parameters('storageAccountName'))]",
		"storageRef": "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
	},

	/* Resources */
	"resources": [
		/* Virtual Network Defintion */
		{
			"apiVersion": "2014-12-01-preview",
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('newVirtualNetworkName')]",
			"location": "[parameters('location')]",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[parameters('addressPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[parameters('subnet1Name')]",
						"properties": {
							"addressPrefix": "[parameters('subnet1Prefix')]"
						}
					},
					{
						"name": "[parameters('subnet2Name')]",
						"properties": {
							"addressPrefix": "[parameters('subnet2Prefix')]"
						}
					}
				]
			}
		},

		/* Public IP Address*/
		{
			"apiVersion": "2014-12-01-preview",
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('publicIPName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('vnetRef')]"

			],
			"properties": {
				"publicIPAllocationMethod": "[parameters('publicIPType')]",
				"dnsSettings": {
					"domainNameLabel": "[variables('DNSNameLB')]"
				}
			}
		},

		/* Availability Sets */
		{
			"type": "Microsoft.Compute/availabilitySets",
			"name": "[parameters('availabilitySetName')]",
			"apiVersion": "2014-12-01-preview",
			"location": "[parameters('location')]",
			"properties": {
					"PlatformFaultDomainCount":"[parameters('faultDomainCount')]", 
                    "PlatformUpdateDomainCount":"[parameters('updateDomainCount')]"  

			}
		},

		/* Storage Accounts for VM Disks */
		{
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[concat(variables('storageAccountName'),copyIndex())]",
			"apiVersion": "2014-12-01-preview",
			"location": "[parameters('location')]",
			"copy": {
				"name": "StorageAccountsLoop",
				"count": "[parameters('numberOfVms')]"
			},
			"properties": {
				"accountType": "[parameters('storageAccountType')]"
			}
		},

		/* Private NICS for the VMs */
		{
			"apiVersion": "2014-12-01-preview",
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(parameters('vmNICNamePattern'),copyIndex())]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "NICSLoop",
				"count": "[parameters('numberOfVMS')]"
			},
			"dependsOn": [
				"[variables('vnetRef')]"

			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "[variables('NICipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Static ",
							"privateIPAddress": "[concat(parameters('VMIPAddressStart'),copyindex())]",
							"subnet": {
								"id": "[variables('subnetBackEndRef')]"
							}
						}

					}
				]
			}
		},

		/* Couchbase VMs */
		{
			"apiVersion": "2014-12-01-preview",
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(parameters('vmName'),copyIndex())]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "VMsLoop",
				"count": "[parameters('numberOfVms')]"
			},
			"dependsOn": [
				"[concat(variables('storageRef'),copyIndex())]",
				"[concat(variables('NICRef'),copyIndex())]",
				"[concat('Microsoft.Compute/availabilitySets/', parameters('availabilitySetName'))]",
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computername": "[concat(parameters('vmName'),copyIndex())]",
					"adminUsername": "[parameters('adminUserName')]",
					"adminPassword": "[parameters('adminPassword')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": "false",
						"ssh": {
							"publicKeys": [
								{
									"path": "[variables('sshKeyPath')]",
									"keyData": "[parameters('sshKeyData')]"
								}
							]
						}
					}
				},
				"storageProfile": {
					"sourceImage": {
						"id": "[variables('vmSourceImageRef')]"
					},
					"destinationVhdsContainer": "[concat('http://',variables('storageAccountName'),copyIndex(),'.blob.core.windows.net/',parameters('vmStorageAccountContainerName'),'/')]",
					"dataDisks": [
						{
							"name": "[concat(parameters('vmName'),copyIndex(), 'Data_1')]",
							"diskSizeGB": "[parameters('vmSizeDataDisks')]",
							"lun": 0,
							"vhd": {
								"Uri": "[concat('http://',variables('storageAccountName'),copyIndex(),'.blob.core.windows.net/',parameters('vmStorageAccountContainerName'),'/Data_1.vhd')]"
							}
						},
						{
							"name": "[concat(parameters('vmName'),copyIndex(), 'Data_2')]",
							"diskSizeGB": "[parameters('vmSizeDataDisks')]",
							"lun": 1,
							"vhd": {
								"Uri": "[concat('http://',variables('storageAccountName'),copyIndex(),'.blob.core.windows.net/',parameters('vmStorageAccountContainerName'),'/Data_2.vhd')]"
							}
						}
					]
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[concat(variables('NICRef'),copyIndex())]"
						}
					]
				}
			}
		},

		/* Custom Script extension - Configure root ssh on all VMs */
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(parameters('vmName'),copyIndex(),'/configuressh')]",
			"apiVersion": "2014-12-01-preview",
			"location": "[parameters('location')]",
			"copy": {
				"name": "VMExtensionsLoop",
				"count": "[parameters('numberOfVms')]"
			},
			"dependsOn": [
				"VMsLoop"
			],
			"properties": {
				"publisher": "Microsoft.OSTCExtensions",
				"type": "CustomScriptForLinux",
				"typeHandlerVersion": "1.2",
				"settings": {
					"fileUris": [
						"[variables('customScriptSSHRootUrl')]",						
						"[variables('sshRootPubBlobUrl')]"
					],
					"commandToExecute": "[variables('customScriptSSHRootCommand')]",
					
				},
				"protectedSettings":{
					"storageAccountName":"[parameters('customScriptConfigStorageAccountName')]",
					"storageAccountKey":"[parameters('customScriptConfigStorageAccountKey')]"
				}
			}
		},
		
		/* Ansible Controller - NIC */
		{
			"apiVersion": "2014-12-01-preview",
			"type": "Microsoft.Network/networkInterfaces",
			"name": "NICAnsibleController",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('vnetRef')]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "[variables('NICipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Static",
							"privateIPAddress": "[concat(parameters('VMIPAddressStart'),parameters('numberOfVms'))]",
							"subnet": {
								"id": "[variables('subnetBackEndRef')]"
							}
						}

					}
				]
			}
		},

		/* Ansible Controller - VM */
		{
			"apiVersion": "2014-12-01-preview",
			"type": "Microsoft.Compute/virtualMachines",
			"name": "AnsibleController",
			"location": "[parameters('location')]",
			
			"dependsOn": [
				"[concat(variables('storageRef'),'0')]",
				"[resourceId('Microsoft.Network/networkInterfaces','NICAnsibleController')]",
				"[concat('Microsoft.Compute/availabilitySets/', parameters('availabilitySetName'))]",
				"VMsLoop"
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
				},
				"hardwareProfile": {
					"vmSize": "Standard_A1"
				},
				"osProfile": {
					"computername": "AnsibleController",
					"adminUsername": "[parameters('adminUserName')]",
					"adminPassword": "[parameters('adminPassword')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": "false",
						"ssh": {
							"publicKeys": [
								{
									"path": "[variables('sshKeyPath')]",
									"keyData": "[parameters('sshKeyData')]"
								}
							]
						}
					}
				},
				"storageProfile": {
					"sourceImage": {
						"id": "[variables('vmSourceImageRef')]"
					},
					"destinationVhdsContainer": "[concat('http://',variables('storageAccountName'),'0.blob.core.windows.net/',parameters('vmStorageAccountContainerName'),'/')]",
					"dataDisks": [						
					]
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces','NICAnsibleController')]"
						}
					]
				}
			}
		},

		/* Custom Script extension - Install Ansible Controller*/
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "AnsibleController/installansible",
			"apiVersion": "2014-12-01-preview",
			"location": "[parameters('location')]",
			"dependsOn": [					
				"Microsoft.Compute/virtualMachines/AnsibleController"
			],
			"properties": {
				"publisher": "Microsoft.OSTCExtensions",
				"type": "CustomScriptForLinux",
				"typeHandlerVersion": "1.2",
				"settings": {
					"fileUris": [
						"[variables('customScriptAnsibleUrl')]",											
						"[variables('sshRootPubBlobUrl')]",						
						"[variables('sshRootCerBlobUrl')]"
					],
					"commandToExecute": "[concat(variables('customScriptAnsibleCommand'),variables('customScriptAnsibleParameters'))]",
					
				},
				"protectedSettings":{
					"storageAccountName":"[parameters('customScriptConfigStorageAccountName')]",
					"storageAccountKey":"[parameters('customScriptConfigStorageAccountKey')]"
				}
			}
		},		
		
		/* Load Balancer Defintion */
		{
			"apiVersion": "2014-12-01-preview",
			"type": "Microsoft.Network/loadBalancers",
			"name": "[parameters('loadBalancerName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('publicIPRef')]",
				"VMsLoop",				
				"[resourceId('Microsoft.Compute/virtualMachines','AnsibleController')]"

			],
			"properties": {
				"frontendIPConfigurations": [
					{
						"name": "[variables('lbFEConfig')]",
						"properties": {
							"publicIPAddress": {
								"id": "[variables('publicIPRef')]"
							}
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "[variables('lbBEConfig')]",
						"properties": {
							"loadBalancingRules": [
								{
									"id": "[variables('lbRuleRef')]"
								}
							],
							"backendIPConfigurations": [
								{
									"id": "[concat(variables('NICRef'),'0/ipConfigurations/',variables('NICipconfig'))]"
								},
								{
									"id": "[concat(variables('NICRef'),'1/ipConfigurations/',variables('NICipconfig'))]"
								}
							]
						}
					}
				],
				"probes": [
					{
						"name": "[variables('lbcbaProbe')]",
						"properties": {
							"protocol": "tcp",
							"port": "[variables('lbcbaPort')]",
							"intervalInSeconds": "5",
							"numberOfProbes": "3"
						}
					}
				],
				"loadBalancingRules": [
					{
						"name": "[variables('lbRuleName')]",
						"properties": {
							"frontendIPConfigurations": [
								{
									"id": "[variables('lbFEConfigRef')]"
								}
							],
							"backendAddressPool": {
								"id": "[variables('lbBEConfigRef')]"
							},
							"protocol": "tcp",
							"frontendPort": "[variables('lbcbaAdminPort')]",
							"backendPort": "[variables('lbcbaAdminPort')]",
							"enableFloatingIP": false,
							"idleTimeoutInMinutes": "[ variables('lbcbaIdleTimeOut')]",
							"probe": {
								"id": "[variables('lbcbaProbeRef')]"
							}
						}
					}
				],
				"inboundNatRules": [
					{
						"name": "sshToAnsibleControllerRule",
						"properties": {
							"frontendIPConfigurations": [
								{
									"id": "[variables('lbFEConfigRef')]"
								}
							],
							"backendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/networkInterfaces','NICAnsibleController'),'/ipConfigurations/',variables('NICipconfig'))]"
							},
							"protocol": "tcp",
							"frontendPort": "[concat(parameters('sshNatRuleFrontEndPort'),'0')]",
							"backendPort": "[parameters('sshNatRuleBackEndPort')]",
							"enableFloatingIP": false
						}
					},
					{
						"name": "sshToVM1NatRule",
						"properties": {
							"frontendIPConfigurations": [
								{
									"id": "[variables('lbFEConfigRef')]"
								}
							],
							"backendIPConfiguration": {
								"id": "[concat(variables('NICRef'),'0/ipConfigurations/',variables('NICipconfig'))]"
							},
							"protocol": "tcp",
							"frontendPort": "[concat(parameters('sshNatRuleFrontEndPort'),'1')]",
							"backendPort": "[parameters('sshNatRuleBackEndPort')]",
							"enableFloatingIP": false
						}
					}
				]
			}
		}
	]

} 
